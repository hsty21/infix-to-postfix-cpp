#include<iostream>
#include<map>
#include<stack>
std::string infixToPostfix(std::stack<char> s,std::string infix){
    std::map<char, int> precedence{
        {'+',1},
        {'-',1},
        {'/',2},
        {'*',2},
        {'^',3},
        {'(',0},
        {')',0}
    };
    std::string postfix = "";
    for(int i=0;i<infix.length();i++){
        if((infix[i] >='a' && infix[i]<='z') || (infix[i] >= 'A' && infix[i] <= 'Z')){
            postfix += infix[i];
        }
        else if(infix[i] == '('){
            s.push(infix[i]);
        }
        else if(infix[i] == ')'){
            while(!s.empty() && s.top() != '('){
                postfix +=  s.top();
                s.pop();
            }
            if(!s.empty()){
                s.pop();
            }
        }
        else if(infix[i] == '/' || infix[i] == '*' || infix[i] == '-' || infix[i] == '+' || infix[i] == '^'){
            if(s.empty()){
                s.push(infix[i]);
            }
            else{
                if(precedence[infix[i]]>precedence[s.top()]){
                    s.push(infix[i]);
                }
                else if(precedence[infix[i]] ==  precedence[s.top()] && infix[i] == '^'){
                    s.push(infix[i]);
                }
                else{
                    while(!s.empty() && precedence[infix[i]] <= precedence[s.top()]){
                        postfix += s.top();
                        s.pop();
                    }
                }
            }
        }
    }
    while(!s.empty()){
        postfix += s.top();
        s.pop();
    }
    return postfix;
}
int main(){
    std::stack<char> s;
    std::string infix;
    std::cout<< "Enter an infix expression:";
    std::getline(std::cin, infix);
    std::string postfix =  infixToPostfix(s,infix);
    std::cout<< "Postfix exppression: "<<postfix<<std::endl;
    return 0;
}
